============================================
Identify high-level location of all attachments and embeds
============================================
 * @author  hcrites@cscc.edu (Heather Crites)
 * @created 06/15/2018	
 * @updated 02/17/2021
============================================




============================================
Notes:
============================================
This is useful for identifying cross-linked content (files in course home directories being used by other courses) and missing files (files which have been deleted but are still being referenced)

SaaS DDA uses multiple databases for cms_doc and the base schemas. To connect the two databases, I use the dblink function in PostgreSQL. If your instance does not have this installed, open a ticket to request it.

In the query, replace the following variables with your institution-specific values:
	[your_saas_schema]: use your specific SaaS schema value
	[your_dda_username]: use your DDA username
	[your_dda_password]: use your DDA password

This query takes about 20 minutes to run.




============================================
Returns:
============================================
  COURSE_PK1: the pk1 value of the course
  COURSE_ID: the course_id of the course
  COURSE_HOME: the course home directory, protected file location, /institution/ root, or other location of file attachments and embeds.  Note: deleted files will show an empty string.
  EMBED_COUNT: the number of file referenced at this location for this embed_type found
  EMBED_TYPE: the type of object containing the file reference:
	Attached: content with an attachment
	Embedded Content: content with an embedded file
	Announcement: announcement with an embedded file
	Assessment: test, survey, pool, or question with an embedded file
	Discussion Forum: discussion board forum with an embedded file
	Discussion Post: discussion board post or reply with an embedded file
	Blog or Journal: blog or journal with an embedded file
	Blog Entry: blog or journal entry with an embedded file
	Banner: course or organization banner
  	
	

	
============================================
Query:
============================================
select 
	content.course_pk1
	, content.course_id
	, case 
		when position('internal/' in xyf_files.full_path) > 0 then '/'||split_part(xyf_files.full_path, '/', 2)||'/'||split_part(xyf_files.full_path, '/', 3)||'/'||split_part(xyf_files.full_path, '/', 4)||'/' 
		when position('courses/' in xyf_files.full_path) > 0 or position('orgs/' in xyf_files.full_path) > 0 then '/'||split_part(xyf_files.full_path, '/', 2)||'/'||split_part(xyf_files.full_path, '/', 3)||'/' 
		else '/'||split_part(xyf_files.full_path, '/', 2)||'/' 
		end as course_home
	, count(*) as embed_count
	, content.cnthndlr_handle as embed_type
from (
	select course_main.pk1 as course_pk1, course_contents.pk1 as content_pk1, 'Attached' as cnthndlr_handle, course_contents.title as content_title, course_main.course_id, files.file_name as xid
		from course_contents_files
		left outer join files on course_contents_files.files_pk1 = files.pk1
		left outer join course_contents on course_contents_files.course_contents_pk1 = course_contents.pk1
		left outer join course_main on course_contents.crsmain_pk1 = course_main.pk1 
	union
		select course_main.pk1 as course_pk1, course_contents.pk1 as content_pk1, 'Embedded Content' as cnthndlr_handle, course_contents.title as content_title, course_main.course_id, array_to_string(regexp_matches(course_contents.main_data, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from course_contents
		left outer join course_main on course_contents.crsmain_pk1 = course_main.pk1
		where course_contents.main_data like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, announcements.pk1 as content_pk1, 'Announcement' as cnthndlr_handle, announcements.subject as content_title, course_main.course_id, array_to_string(regexp_matches(announcements.announcement, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from announcements
		left outer join course_main on announcements.crsmain_pk1 = course_main.pk1
		where announcements.announcement like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, qti_asi_data.pk1 as content_pk1, 'Assessment' as cnthndlr_handle, qti_asi_data.title as content_title, course_main.course_id, array_to_string(regexp_matches(encode(qti_asi_data.data::bytea, 'escape'), 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from qti_asi_data
		left outer join course_main on qti_asi_data.crsmain_pk1 = course_main.pk1 
		where encode(data::bytea, 'escape') like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, forum_main.pk1 as content_pk1, 'Discussion Forum' as cnthndlr_handle, forum_main.name as content_title, course_main.course_id, array_to_string(regexp_matches(forum_main.description, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from forum_main
		left outer join conference_main on forum_main.confmain_pk1 = conference_main.pk1 
		left outer join course_main on conference_main.crsmain_pk1 = course_main.pk1 
		where forum_main.description like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, msg_main.pk1 as content_pk1, 'Discussion Post' as cnthndlr_handle, msg_main.subject as content_title, course_main.course_id, array_to_string(regexp_matches(msg_main.msg_text, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from msg_main
		left outer join forum_main on msg_main.forummain_pk1 = forum_main.pk1 
		left outer join conference_main on forum_main.confmain_pk1 = conference_main.pk1 
		left outer join course_main on conference_main.crsmain_pk1 = course_main.pk1 
		where msg_main.msg_text like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, blogs.pk1 as content_pk1, 'Blog or Journal' as cnthndlr_handle, blogs.title as content_title, course_main.course_id, array_to_string(regexp_matches(blogs.description, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from blogs
		left outer join course_main on blogs.crsmain_pk1 = course_main.pk1 
		where blogs.description like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, blog_entry.pk1 as content_pk1, 'Blog Entry' as cnthndlr_handle, blog_entry.title as content_title, course_main.course_id, array_to_string(regexp_matches(blog_entry.description, 'bbcswebdav([^\s"''<\)]+)','g'), '') as xid
		from blog_entry 
		left outer join blogs on blog_entry.blog_pk1 = blogs.pk1 
		left outer join course_main on blogs.crsmain_pk1 = course_main.pk1 
		where blog_entry.description like '%bbcswebdav%'
	union
		select course_main.pk1 as course_pk1, '0' as content_pk1, 'Banner' as cnthndlr_handle, 'Banner' as content_title, course_main.course_id, case when substr(course_main.banner_url,1,1) = '/' then course_main.banner_url else '0' end as xid
		from course_main 
		where course_main.banner_url is not null
) as content
left outer join (
	select *
	from dblink('dbname=[your_saas_schema]_cms_doc user=[your_dda_username] password=[your_dda_password]', 'select xyf_files.entry_id, xyf_urls.full_path from xyf_files left outer join xyf_urls on xyf_files.file_id = xyf_urls.file_id')
	as xyf_files(entry_id int, full_path text)
) as xyf_files on content.xid = '/xid-'||cast(xyf_files.entry_id as text)||'_1'
group by content.course_pk1, content.course_id, case when position('internal/' in xyf_files.full_path) > 0 then '/'||split_part(xyf_files.full_path, '/', 2)||'/'||split_part(xyf_files.full_path, '/', 3)||'/'||split_part(xyf_files.full_path, '/', 4)||'/' when position('courses/' in xyf_files.full_path) > 0 or position('orgs/' in xyf_files.full_path) > 0 then '/'||split_part(xyf_files.full_path, '/', 2)||'/'||split_part(xyf_files.full_path, '/', 3)||'/' else '/'||split_part(xyf_files.full_path, '/', 2)||'/' end, content.cnthndlr_handle
